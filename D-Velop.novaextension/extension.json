{
  "identifier": "tech.staysail.ServeD",
  "name": "D-Velop",
  "organization": "Staysail Systems",
  "description": "D language support via Serve-D.",
  "version": "0.8.3",
  "categories": ["languages", "formatters"],
  "repository": "https://github.com/staysail/nova-serve-d",
  "bugs": "https://github.com/staysail/nova-serve-d/issues",
  "main": "main.js",
  "min_runtime": "10.0",
  "license": "MIT",

  "entitlements": {
    "process": true,
    "filesystem": "readwrite",
    "requests": true
  },

  "commands": {
    "editor": [
      {
        "title": "Jump to Definition",
        "command": "dvelop.jumpToDefinition",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Rename Symbol",
        "command": "dvelop.renameSymbol",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Format File",
        "command": "dvelop.formatFile",
        "shortcut": "opt-shift-f",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Preferences",
        "command": "dvelop.preferences"
      }
    ],
    "extensions": [
      {
        "title": "Preferences",
        "command": "dvelop.extensionPreferences"
      },
      {
        "title": "Check for Update",
        "command": "dvelop.checkForUpdate"
      },
      {
        "title": "Restart Server",
        "command": "dvelop.restartServer",
        "filters": { "syntaxes": ["d"] }
      }
    ]
  },
  "configWorkspace": [
    {
      "title": "Formatting",
      "type": "section",
      "children": [
        {
          "key": "dvelop.fmt.onSave",
          "title": "Format on Save",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.overrideEditorConfig",
          "title": "Override .editorconfig",
          "description": "If set, the values here override any .editorconfig file.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.braceStyle",
          "title": "Brace Style",
          "type": "enum",
          "values": [
            ["allman", "Allman"],
            ["knr", "K&R"],
            ["otbs", "One True Brace"],
            ["stroustrup", "Stroustrup"]
          ],
          "default": "allman"
        },
        {
          "key": "dvelop.fmt.softLength",
          "title": "Soft Line Length",
          "type": "number",
          "max": 1000,
          "min": 10,
          "default": 80,
          "description": "Formatter will try to keep lines less than this usually."
        },
        {
          "key": "dvelop.fmt.hardLength",
          "title": "Hard Line Length",
          "type": "number",
          "max": 1000,
          "min": 10,
          "default": 120,
          "description": "Formatter will keep lines less than this in any case."
        },
        {
          "key": "dvelop.fmt.keepBreaks",
          "title": "Preserve Line Breaks",
          "description": "Formater will preserve line breaks if possible.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.alignSwitch",
          "title": "Align Switch Statements",
          "type": "boolean",
          "description": "Align labels, cases, and defaults with their enclosing switch.",
          "default": true
        },
        {
          "key": "dvelop.fmt.compactLabeled",
          "title": "Compact Labels",
          "description": "Label on same line as associated statement.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.breakAfterOperator",
          "title": "Break After Operator",
          "description": "Prefer to break lines after the operator.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.spaceAfterCast",
          "title": "Space After Cast",
          "description": "Insert a space after a type cast.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.spaceBeforeParameters",
          "title": "Space Before Function Parameters",
          "description": "Insert a space before the parameter list.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.selectiveImportSpace",
          "title": "Selective Import Space",
          "description": "Insert a space after the module name for selective imports.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.singleIndent",
          "title": "Single Indent Inside Parenthesis",
          "description": "Indent inside a parenthesis by one level instead of two.",
          "type": "boolean",
          "value": false
        },
        {
          "key": "dvelop.fmt.spaceBeforeAAColon",
          "title": "Old Style Associative Array Literals",
          "description": "Insert a space between the key and colon of an associative array.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.templateConstraints",
          "title": "Template Constraint Location",
          "description": "Where should template constraints be located?",
          "type": "enum",
          "values": [
            ["cond0", "Same line if possible, no indentation"],
            ["cond1", "Same line if possible, single indent otherwise"],
            ["cond2", "Same line if possible, double indent otherwise"],
            ["always0", "Next line, no indentation"],
            ["always1", "Next line, single indent"],
            ["always2", "Next line, double indent"]
          ],
          "default": "cond2"
        }
      ]
    },
    {
      "title": "Helpers",
      "type": "section",
      "children": [
        {
          "key": "dvelop.dub.path",
          "title": "Dub Location",
          "description": "Path to dub, if empty uses global default",
          "type": "enum",
          "resolve": "dvelop.findDub",
          "allowCustom": "true",
          "placeholder": "/Library/D/dmd/bin/dub"
        },
        {
          "key": "dvelop.dmd.path",
          "title": "DMD Location",
          "description": "Path to dmd, if empty uses global default",
          "type": "enum",
          "resolve": "dvelop.findDmd",
          "allowCustom": "true",
          "placeholder": "/Library/D/dmd/bin/dmd"
        },
        {
          "key": "devlop.importPaths",
          "title": "Project Import Paths",
          "type": "pathArray",
          "allowFiles": false,
          "allowFolders": true,
          "description": "Additional paths to search for imports."
        }
      ]
    }
  ],
  "config": [
    {
      "type": "section",
      "title": "Language Server",
      "children": [
        {
          "key": "dvelop.checkForUpdates",
          "title": "Check for Updates at Start",
          "description": "When starting up, should we check to see if a new update of serve-d is available?",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.allowPreRelease",
          "title": "Use Beta Releases",
          "description": "Selecting this enables beta (and release candidate) versions of serve-d to be installed.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.useCustomServer",
          "title": "Custom Serve-D Installation",
          "description": "Select this if you wish to use your own copy of serve-d.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.customServerPath",
          "title": "Serve-D Location",
          "description": "Path to serve-d, only used if using a custom installation.",
          "type": "path",
          "placeholder": "/usr/local/bin/serve-d"
        }
      ]
    },
    {
      "type": "section",
      "title": "Helpers",
      "children": [
        {
          "key": "dvelop.dub.path",
          "title": "Dub Location",
          "description": "Path to dub, if empty will search $PATH",
          "type": "path",
          "placeholder": "/Library/D/dmd/bin/dub"
        },
        {
          "key": "dvelop.dmd.path",
          "title": "DMD Location",
          "description": "Path to DMD, if empty will search $PATH",
          "type": "path",
          "placeholder": "/Library/D/dmd/bin/dmd"
        }
      ]
    }
  ],
  "issueMatchers": {
    "dmd-error": {
      "pattern": {
        "regexp": "^([^:()]+)\\(([0-9]+),([0-9]+)\\): ([A-Za-z]+): (.+)$",
        "message": 5,
        "file": 1,
        "line": 2,
        "column": 3,
        "severity": 4
      }
    },
    "dmd-short-error": {
      "pattern": {
        "regexp": "^([^:()]+)\\(([0-9]+)\\): ([A-Za-z]+): (.+)$",
        "message": 4,
        "file": 1,
        "line": 2,
        "severity": 3
      }
    }
  },
  "debug": true,
  "activationEvents": ["onLanguage:d"]
}
